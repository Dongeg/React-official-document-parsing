第一步：拆分用户界面为一个组件树
        把美工给的设计图划分模块
        理想状态下一个组件应该只做一件事，假如它功能逐渐变大就需要被拆分成更小的子组件。
        结构树栗子：
        FilterableProductTable
		│	
		├── SearchBar
		│
		└──	ProductTable
		    │
			├──	ProductCategoryRow
			└──	ProductRow
第二步： 利用 React ，创建应用的一个静态版本
         因为是静态模板，所以不需要states

第三步：识别出最小的（但是完整的）代表 UI 的 state
        找出所有数据片段，然后考虑
		让我们分析每一项，指出哪一个是 state 。简单地对每一项数据提出三个问题：

		1.是否是从父级通过 props 传入的？如果是，可能不是 state 。
		2.是否会随着时间改变？如果不是，可能不是 state 。
		3.能根据组件中其它 state 数据或者 props 计算出来吗？如果是，就不是 state 。


第四步：确认 state 的生命周期
         React 中数据是沿着组件树从上到下单向流动的

第五步：添加反向数据流